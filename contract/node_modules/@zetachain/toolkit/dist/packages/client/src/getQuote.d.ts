import { ZetaChainClient } from "./client";
/**
 * Retrieves the ZRC20 contract address for a given ERC20 token.
 * @param {string} erc20 - The ERC20 token address.
 * @returns {Promise<string>} - The ZRC20 contract address.
 * @throws Will throw an error if the ERC-20 token is not supported.
 */
export declare const getZRC20FromERC20: (this: ZetaChainClient, erc20: string) => Promise<any>;
/**
 * Retrieves the ZRC20 contract address for the gas token of a given network.
 * @param {string} network - The network name.
 * @returns {Promise<string>} - The ZRC20 contract address for the gas token.
 */
export declare const getZRC20GasToken: (this: ZetaChainClient, network: string) => Promise<any>;
/**
 * Calculates the refund fee in the input ZRC20 token.
 * @param {string} inputZRC20 - The input ZRC20 token address.
 * @returns {Promise<Object>} - An object containing the refund fee amount and its decimals.
 */
export declare const getRefundFee: (this: ZetaChainClient, inputZRC20: string) => Promise<{
    amount: any;
    decimals: any;
}>;
/**
 * Calculates the withdraw fee in the input ZRC20 token for a given output ZRC20 token.
 * @param {string} inputZRC20 - The input ZRC20 token address.
 * @param {string} outputZRC20 - The output ZRC20 token address.
 * @returns {Promise<Object>} - An object containing the withdraw fee amount and its decimals.
 */
export declare const getWithdrawFeeInInputToken: (this: ZetaChainClient, inputZRC20: string, outputZRC20: string) => Promise<{
    amount: any;
    decimals: any;
}>;
/**
 * Retrieves a quote for swapping input ZRC20 token to output ZRC20 token.
 * @param {string} inputAmount - The amount of input ZRC20 token.
 * @param {string} inputZRC20 - The input ZRC20 token address.
 * @param {string} outputZRC20 - The output ZRC20 token address.
 * @returns {Promise<Object>} - An object containing the output amount and its decimals.
 */
export declare const getQuote: (this: ZetaChainClient, inputAmount: string, inputZRC20: string, outputZRC20: string) => Promise<{
    amount: any;
    decimals: any;
}>;
