"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evmSetup = exports.deployUniswap = exports.deployWZETA = void 0;
const constants_1 = require("@ethersproject/constants");
const units_1 = require("@ethersproject/units");
const hardhat_1 = require("hardhat");
const typechain_types_1 = require("../../../typechain-types");
const deployWZETA = async (signer) => {
    const WZETAFactory = (await hardhat_1.ethers.getContractFactory("WZETA"));
    const wZETAContract = (await WZETAFactory.deploy());
    await wZETAContract.deployed();
    await wZETAContract.deposit({ value: (0, units_1.parseEther)("10") });
    return wZETAContract;
};
exports.deployWZETA = deployWZETA;
const deployUniswap = async (signer, wZETA) => {
    const UniswapV2Factory = (await hardhat_1.ethers.getContractFactory("UniswapV2Factory"));
    const uniswapFactory = (await UniswapV2Factory.deploy(signer.address));
    await uniswapFactory.deployed();
    const UniswapRouter = (await hardhat_1.ethers.getContractFactory("TestUniswapRouter"));
    const uniswapRouter = (await UniswapRouter.deploy(uniswapFactory.address, wZETA));
    await uniswapRouter.deployed();
    return { uniswapFactory, uniswapRouter };
};
exports.deployUniswap = deployUniswap;
const addZetaEthLiquidity = async (signer, token, uniswapRouterAddr) => {
    const block = await hardhat_1.ethers.provider.getBlock("latest");
    const tx1 = await token.approve(uniswapRouterAddr, constants_1.MaxUint256);
    await tx1.wait();
    const uniswapRouterFork = typechain_types_1.TestUniswapRouter__factory.connect(uniswapRouterAddr, signer);
    const tx2 = await uniswapRouterFork.addLiquidityETH(token.address, (0, units_1.parseUnits)("2000"), 0, 0, signer.address, block.timestamp + 360, {
        gasLimit: 10000000,
        value: (0, units_1.parseUnits)("10"),
    });
    await tx2.wait();
};
const evmSetup = async (gasTokenAddr, uniswapFactoryAddr, uniswapRouterAddr) => {
    const [signer] = await hardhat_1.ethers.getSigners();
    const ZRC20Factory = (await hardhat_1.ethers.getContractFactory("MockZRC20"));
    const token1Contract = (await ZRC20Factory.deploy((0, units_1.parseUnits)("1000000"), "tBNB", "tBNB"));
    const token2Contract = (await ZRC20Factory.deploy((0, units_1.parseUnits)("1000000"), "gETH", "gETH"));
    const token3Contract = (await ZRC20Factory.deploy((0, units_1.parseUnits)("1000000"), "tMATIC", "tMATIC"));
    const token4Contract = (await ZRC20Factory.deploy((0, units_1.parseUnits)("1000000"), "USDC", "USDC"));
    const token5Contract = (await ZRC20Factory.deploy((0, units_1.parseUnits)("1000000"), "tBTC", "tBTC"));
    const ZRC20Contracts = [
        token1Contract,
        token2Contract,
        token3Contract,
        token4Contract,
        token5Contract,
    ];
    const SystemContractFactory = (await hardhat_1.ethers.getContractFactory("MockSystemContract"));
    const systemContract = (await SystemContractFactory.deploy(gasTokenAddr, uniswapFactoryAddr, uniswapRouterAddr));
    await systemContract.setGasCoinZRC20(97, ZRC20Contracts[0].address);
    await systemContract.setGasCoinZRC20(5, ZRC20Contracts[1].address);
    await systemContract.setGasCoinZRC20(80001, ZRC20Contracts[2].address);
    await systemContract.setGasCoinZRC20(18332, ZRC20Contracts[4].address);
    await ZRC20Contracts[0].setGasFeeAddress(ZRC20Contracts[0].address);
    await ZRC20Contracts[0].setGasFee((0, units_1.parseEther)("0.01"));
    await ZRC20Contracts[1].setGasFeeAddress(ZRC20Contracts[1].address);
    await ZRC20Contracts[1].setGasFee((0, units_1.parseEther)("0.01"));
    await ZRC20Contracts[2].setGasFeeAddress(ZRC20Contracts[2].address);
    await ZRC20Contracts[2].setGasFee((0, units_1.parseEther)("0.01"));
    await ZRC20Contracts[3].setGasFeeAddress(ZRC20Contracts[1].address);
    await ZRC20Contracts[3].setGasFee((0, units_1.parseEther)("0.01"));
    await ZRC20Contracts[4].setGasFeeAddress(ZRC20Contracts[4].address);
    await ZRC20Contracts[4].setGasFee((0, units_1.parseEther)("0.01"));
    await addZetaEthLiquidity(signer, ZRC20Contracts[0], uniswapRouterAddr);
    await addZetaEthLiquidity(signer, ZRC20Contracts[1], uniswapRouterAddr);
    await addZetaEthLiquidity(signer, ZRC20Contracts[2], uniswapRouterAddr);
    await addZetaEthLiquidity(signer, ZRC20Contracts[3], uniswapRouterAddr);
    await addZetaEthLiquidity(signer, ZRC20Contracts[4], uniswapRouterAddr);
    return { ZRC20Contracts, systemContract };
};
exports.evmSetup = evmSetup;
