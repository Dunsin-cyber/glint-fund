import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { ZetaConnectorMockValue, ZetaConnectorMockValueInterface } from "../../../contracts/ZetaConnectorMock.sol/ZetaConnectorMockValue";
type ZetaConnectorMockValueConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class ZetaConnectorMockValue__factory extends ContractFactory {
    constructor(...args: ZetaConnectorMockValueConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ZetaConnectorMockValue>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ZetaConnectorMockValue;
    connect(signer: Signer): ZetaConnectorMockValue__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5060ea8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ec02690114602d575b600080fd5b60436004803603810190603f91906064565b6045565b005b50565b600060c08284031215605b57605a60a5565b5b81905092915050565b600060208284031215607757607660af565b5b600082013567ffffffffffffffff811115609257609160aa565b5b609c848285016048565b91505092915050565b600080fd5b600080fd5b600080fdfea2646970667358221220a533791b73f798c1ed73790b673d2b747d6d63cb50bff753a5a44bf51784d42764736f6c63430008070033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "destinationChainId";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "destinationAddress";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "destinationGasLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "zetaValueAndGas";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "zetaParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ZetaInterfaces.SendInput";
            readonly name: "input";
            readonly type: "tuple";
        }];
        readonly name: "send";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ZetaConnectorMockValueInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ZetaConnectorMockValue;
}
export {};
