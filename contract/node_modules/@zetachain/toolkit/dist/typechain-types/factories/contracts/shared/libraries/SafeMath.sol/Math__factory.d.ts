import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type { Math, MathInterface } from "../../../../../contracts/shared/libraries/SafeMath.sol/Math";
type MathConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class Math__factory extends ContractFactory {
    constructor(...args: MathConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Math>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Math;
    connect(signer: Signer): Math__factory;
    static readonly bytecode = "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122004e4099cea2415c66ea8c077ff18561866ce887a8464ad7469d8dfd337fc637c64736f6c63430008070033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AdditionsOverflow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MultiplicationsOverflow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "SubtractionsUnderflow";
        readonly type: "error";
    }];
    static createInterface(): MathInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Math;
}
export {};
