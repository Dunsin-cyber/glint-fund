import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { UniswapV2Library, UniswapV2LibraryInterface } from "../../../../contracts/shared/libraries/UniswapV2Library";
type UniswapV2LibraryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class UniswapV2Library__factory extends ContractFactory {
    constructor(...args: UniswapV2LibraryConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<UniswapV2Library>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): UniswapV2Library;
    connect(signer: Signer): UniswapV2Library__factory;
    static readonly bytecode = "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201b89ee00e541705543f8a1c99c22642eb1f3b4269216412ce03159e60997c13f64736f6c63430008070033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "IdenticalAddresses";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientInputAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientLiquidity";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientOutputAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPath";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ZeroAddress";
        readonly type: "error";
    }];
    static createInterface(): UniswapV2LibraryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): UniswapV2Library;
}
export {};
