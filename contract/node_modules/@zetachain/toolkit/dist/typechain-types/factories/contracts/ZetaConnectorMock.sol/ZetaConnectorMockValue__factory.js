"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZetaConnectorMockValue__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "destinationChainId",
                        type: "uint256",
                    },
                    {
                        internalType: "bytes",
                        name: "destinationAddress",
                        type: "bytes",
                    },
                    {
                        internalType: "uint256",
                        name: "destinationGasLimit",
                        type: "uint256",
                    },
                    {
                        internalType: "bytes",
                        name: "message",
                        type: "bytes",
                    },
                    {
                        internalType: "uint256",
                        name: "zetaValueAndGas",
                        type: "uint256",
                    },
                    {
                        internalType: "bytes",
                        name: "zetaParams",
                        type: "bytes",
                    },
                ],
                internalType: "struct ZetaInterfaces.SendInput",
                name: "input",
                type: "tuple",
            },
        ],
        name: "send",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b5060ea8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ec02690114602d575b600080fd5b60436004803603810190603f91906064565b6045565b005b50565b600060c08284031215605b57605a60a5565b5b81905092915050565b600060208284031215607757607660af565b5b600082013567ffffffffffffffff811115609257609160aa565b5b609c848285016048565b91505092915050565b600080fd5b600080fd5b600080fdfea2646970667358221220a533791b73f798c1ed73790b673d2b747d6d63cb50bff753a5a44bf51784d42764736f6c63430008070033";
const isSuperArgs = (xs) => xs.length > 1;
class ZetaConnectorMockValue__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.ZetaConnectorMockValue__factory = ZetaConnectorMockValue__factory;
ZetaConnectorMockValue__factory.bytecode = _bytecode;
ZetaConnectorMockValue__factory.abi = _abi;
