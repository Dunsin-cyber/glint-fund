import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { OnlySystem, OnlySystemInterface } from "../../contracts/OnlySystem";
type OnlySystemConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class OnlySystem__factory extends ContractFactory {
    constructor(...args: OnlySystemConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OnlySystem>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OnlySystem;
    connect(signer: Signer): OnlySystem__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212201ab8eb4b85cea37bdebcfd76388ba1fb426a3b2974f95edcfb6b12919a1c76d564736f6c63430008070033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly name: "OnlySystemContract";
        readonly type: "error";
    }];
    static createInterface(): OnlySystemInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OnlySystem;
}
export {};
