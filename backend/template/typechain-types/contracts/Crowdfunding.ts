/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type ZContextStruct = {
  origin: PromiseOrValue<BytesLike>;
  sender: PromiseOrValue<string>;
  chainID: PromiseOrValue<BigNumberish>;
};

export type ZContextStructOutput = [string, string, BigNumber] & {
  origin: string;
  sender: string;
  chainID: BigNumber;
};

export interface CrowdfundingInterface extends utils.Interface {
  functions: {
    "campaignCount()": FunctionFragment;
    "campaigns(uint8)": FunctionFragment;
    "claim(uint8)": FunctionFragment;
    "create(string,string,uint64,string[])": FunctionFragment;
    "donate(uint8)": FunctionFragment;
    "onCrossChainCall((bytes,address,uint256),address,uint256,bytes)": FunctionFragment;
    "pledgedAmount(uint8,address)": FunctionFragment;
    "systemContract()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "campaignCount"
      | "campaigns"
      | "claim"
      | "create"
      | "donate"
      | "onCrossChainCall"
      | "pledgedAmount"
      | "systemContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "campaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onCrossChainCall",
    values: [
      ZContextStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgedAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "systemContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "campaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onCrossChainCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pledgedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemContract",
    data: BytesLike
  ): Result;

  events: {
    "Claim(uint8)": EventFragment;
    "Launch(uint8,address,string,string,uint64,string[])": EventFragment;
    "Pledge(uint8,address,uint64)": EventFragment;
    "Refund(uint8,address,uint64)": EventFragment;
    "Unpledge(uint8,address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Launch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pledge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpledge"): EventFragment;
}

export interface ClaimEventObject {
  id: number;
}
export type ClaimEvent = TypedEvent<[number], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface LaunchEventObject {
  id: number;
  admin: string;
  name: string;
  description: string;
  amount_required: BigNumber;
  tags: string[];
}
export type LaunchEvent = TypedEvent<
  [number, string, string, string, BigNumber, string[]],
  LaunchEventObject
>;

export type LaunchEventFilter = TypedEventFilter<LaunchEvent>;

export interface PledgeEventObject {
  id: number;
  pledger: string;
  amount: BigNumber;
}
export type PledgeEvent = TypedEvent<
  [number, string, BigNumber],
  PledgeEventObject
>;

export type PledgeEventFilter = TypedEventFilter<PledgeEvent>;

export interface RefundEventObject {
  id: number;
  pledger: string;
  amount: BigNumber;
}
export type RefundEvent = TypedEvent<
  [number, string, BigNumber],
  RefundEventObject
>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export interface UnpledgeEventObject {
  id: number;
  pledger: string;
  amount: BigNumber;
}
export type UnpledgeEvent = TypedEvent<
  [number, string, BigNumber],
  UnpledgeEventObject
>;

export type UnpledgeEventFilter = TypedEventFilter<UnpledgeEvent>;

export interface Crowdfunding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdfundingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    campaignCount(overrides?: CallOverrides): Promise<[number]>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber, boolean, string, BigNumber] & {
        id: number;
        admin: string;
        name: string;
        amount_required: BigNumber;
        donation_complete: boolean;
        description: string;
        amount_donated: BigNumber;
      }
    >;

    claim(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      amount_required: PromiseOrValue<BigNumberish>,
      tags: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onCrossChainCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pledgedAmount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    systemContract(overrides?: CallOverrides): Promise<[string]>;
  };

  campaignCount(overrides?: CallOverrides): Promise<number>;

  campaigns(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, BigNumber, boolean, string, BigNumber] & {
      id: number;
      admin: string;
      name: string;
      amount_required: BigNumber;
      donation_complete: boolean;
      description: string;
      amount_donated: BigNumber;
    }
  >;

  claim(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create(
    name: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    amount_required: PromiseOrValue<BigNumberish>,
    tags: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donate(
    id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onCrossChainCall(
    context: ZContextStruct,
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pledgedAmount(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  systemContract(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    campaignCount(overrides?: CallOverrides): Promise<number>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber, boolean, string, BigNumber] & {
        id: number;
        admin: string;
        name: string;
        amount_required: BigNumber;
        donation_complete: boolean;
        description: string;
        amount_donated: BigNumber;
      }
    >;

    claim(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      amount_required: PromiseOrValue<BigNumberish>,
      tags: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    donate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onCrossChainCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    pledgedAmount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    systemContract(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Claim(uint8)"(id?: null): ClaimEventFilter;
    Claim(id?: null): ClaimEventFilter;

    "Launch(uint8,address,string,string,uint64,string[])"(
      id?: null,
      admin?: PromiseOrValue<string> | null,
      name?: null,
      description?: null,
      amount_required?: null,
      tags?: null
    ): LaunchEventFilter;
    Launch(
      id?: null,
      admin?: PromiseOrValue<string> | null,
      name?: null,
      description?: null,
      amount_required?: null,
      tags?: null
    ): LaunchEventFilter;

    "Pledge(uint8,address,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      pledger?: PromiseOrValue<string> | null,
      amount?: null
    ): PledgeEventFilter;
    Pledge(
      id?: PromiseOrValue<BigNumberish> | null,
      pledger?: PromiseOrValue<string> | null,
      amount?: null
    ): PledgeEventFilter;

    "Refund(uint8,address,uint64)"(
      id?: null,
      pledger?: PromiseOrValue<string> | null,
      amount?: null
    ): RefundEventFilter;
    Refund(
      id?: null,
      pledger?: PromiseOrValue<string> | null,
      amount?: null
    ): RefundEventFilter;

    "Unpledge(uint8,address,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      pledger?: PromiseOrValue<string> | null,
      amount?: null
    ): UnpledgeEventFilter;
    Unpledge(
      id?: PromiseOrValue<BigNumberish> | null,
      pledger?: PromiseOrValue<string> | null,
      amount?: null
    ): UnpledgeEventFilter;
  };

  estimateGas: {
    campaignCount(overrides?: CallOverrides): Promise<BigNumber>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      amount_required: PromiseOrValue<BigNumberish>,
      tags: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onCrossChainCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pledgedAmount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    systemContract(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    campaignCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      amount_required: PromiseOrValue<BigNumberish>,
      tags: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onCrossChainCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pledgedAmount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    systemContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
